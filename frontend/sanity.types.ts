/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type CallToAction = {
  _type: "callToAction";
  heading: string;
  text?: string;
  buttonText?: string;
  link?: Link;
};

export type Link = {
  _type: "link";
  linkType?: "href" | "page" | "post";
  href?: string;
  page?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  post?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  };
  openInNewTab?: boolean;
};

export type InfoSection = {
  _type: "infoSection";
  heading?: string;
  subheading?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      linkType?: "href" | "page" | "post";
      href?: string;
      page?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      post?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      openInNewTab?: boolean;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    linkType?: "href" | "page" | "post";
    href?: string;
    page?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page";
    };
    post?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "post";
    };
    openInNewTab?: boolean;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type ServicesPage = {
  _id: string;
  _type: "servicesPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description: string;
  services: Array<{
    title: string;
    description: string;
    icon?: "flag" | "building" | "box" | "arrow" | "settings" | "tools" | "eye" | "shield";
    features: Array<string>;
    _key: string;
  }>;
  callToAction?: {
    title: string;
    description: string;
    buttonText?: string;
    buttonLink: string;
  };
};

export type ContactPage = {
  _id: string;
  _type: "contactPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description: string;
  contactInfo?: {
    phone: string;
    phoneHours?: string;
    email: string;
    emailResponse?: string;
    address: string;
    emergencyPhone: string;
    emergencyHours?: string;
  };
  serviceAreas?: {
    title: string;
    description: string;
    areas: Array<string>;
  };
  contactForm?: {
    title: string;
    serviceOptions?: Array<{
      label: string;
      value: string;
      _key: string;
    }>;
    submitButtonText?: string;
    privacyNotice?: string;
  };
};

export type GalleryPage = {
  _id: string;
  _type: "galleryPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description: string;
  categories?: Array<{
    name: string;
    slug: Slug;
    _key: string;
  }>;
  images?: Array<{
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    title: string;
    description: string;
    category: "alle" | "jordarbejde" | "maskiner" | "transport" | "projekter";
    alt: string;
    featured?: boolean;
    _key: string;
  }>;
  loadMoreText?: string;
  callToAction?: {
    title: string;
    description: string;
    primaryButtonText?: string;
    secondaryButtonText?: string;
    phoneNumber: string;
  };
};

export type Homepage = {
  _id: string;
  _type: "homepage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  hero?: {
    title: string;
    subtitle: string;
    backgroundImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    };
    primaryButtonText?: string;
    secondaryButtonText?: string;
  };
  mainContent?: {
    title: string;
    description: string;
    features?: Array<{
      title: string;
      description: string;
      icon?: "settings" | "box" | "eye" | "shield" | "tools" | "star";
      _key: string;
    }>;
  };
  capabilities?: {
    title: string;
    description: string;
    leftColumn?: {
      title?: string;
      content?: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
    };
    rightColumn?: {
      title?: string;
      content?: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
    };
  };
  contactSection?: {
    title: string;
    description: string;
    buttonText?: string;
  };
  recentProjects?: {
    title: string;
    description?: string;
    viewAllText?: string;
  };
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      linkType?: "href" | "page" | "post";
      href?: string;
      page?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      post?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      openInNewTab?: boolean;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  };
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  heading: string;
  subheading?: string;
  pageBuilder?: Array<{
    _key: string;
  } & CallToAction | {
    _key: string;
  } & InfoSection>;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  content?: BlockContent;
  excerpt?: string;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "person";
  };
};

export type Person = {
  _id: string;
  _type: "person";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  firstName: string;
  lastName: string;
  picture: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type SanityAssistInstructionTask = {
  _type: "sanity.assist.instructionTask";
  path?: string;
  instructionKey?: string;
  started?: string;
  updated?: string;
  info?: string;
};

export type SanityAssistTaskStatus = {
  _type: "sanity.assist.task.status";
  tasks?: Array<{
    _key: string;
  } & SanityAssistInstructionTask>;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: "sanity.assist.schemaType.annotations";
  title?: string;
  fields?: Array<{
    _key: string;
  } & SanityAssistSchemaTypeField>;
};

export type SanityAssistOutputType = {
  _type: "sanity.assist.output.type";
  type?: string;
};

export type SanityAssistOutputField = {
  _type: "sanity.assist.output.field";
  path?: string;
};

export type SanityAssistInstructionContext = {
  _type: "sanity.assist.instruction.context";
  reference: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "assist.instruction.context";
  };
};

export type AssistInstructionContext = {
  _id: string;
  _type: "assist.instruction.context";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SanityAssistInstructionUserInput = {
  _type: "sanity.assist.instruction.userInput";
  message: string;
  description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  } | {
    _key: string;
  } & SanityAssistInstructionFieldRef | {
    _key: string;
  } & SanityAssistInstructionContext | {
    _key: string;
  } & SanityAssistInstructionUserInput>;
  style?: "normal";
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type SanityAssistInstructionFieldRef = {
  _type: "sanity.assist.instruction.fieldRef";
  path?: string;
};

export type SanityAssistInstruction = {
  _type: "sanity.assist.instruction";
  prompt?: SanityAssistInstructionPrompt;
  icon?: string;
  title?: string;
  userId?: string;
  createdById?: string;
  output?: Array<{
    _key: string;
  } & SanityAssistOutputField | {
    _key: string;
  } & SanityAssistOutputType>;
};

export type SanityAssistSchemaTypeField = {
  _type: "sanity.assist.schemaType.field";
  path?: string;
  instructions?: Array<{
    _key: string;
  } & SanityAssistInstruction>;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = CallToAction | Link | InfoSection | BlockContent | ServicesPage | ContactPage | GalleryPage | Homepage | Settings | Page | Post | Person | SanityAssistInstructionTask | SanityAssistTaskStatus | SanityAssistSchemaTypeAnnotations | SanityAssistOutputType | SanityAssistOutputField | SanityAssistInstructionContext | AssistInstructionContext | SanityAssistInstructionUserInput | SanityAssistInstructionPrompt | SanityAssistInstructionFieldRef | SanityAssistInstruction | SanityAssistSchemaTypeField | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: settingsQuery
// Query: *[_type == "settings"][0]{  title,  description,  ogImage}
export type SettingsQueryResult = {
  title: string;
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      linkType?: "href" | "page" | "post";
      href?: string;
      page?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      post?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      openInNewTab?: boolean;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  ogImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  } | null;
} | null;
// Variable: homepageQuery
// Query: *[_type == "homepage"][0]{  hero{    title,    subtitle,    backgroundImage{      asset->{        _id,        url      },      alt    },    primaryButtonText,    secondaryButtonText  },  mainContent{    title,    description,    features[]{      title,      description,      icon    }  },  capabilities{    title,    description,    leftColumn{      title,      content    },    rightColumn{      title,      content    }  },  contactSection{    title,    description,    buttonText  },  recentProjects{    title,    description,    viewAllText  }}
export type HomepageQueryResult = {
  hero: {
    title: string;
    subtitle: string;
    backgroundImage: {
      asset: {
        _id: string;
        url: string | null;
      } | null;
      alt: string;
    };
    primaryButtonText: string | null;
    secondaryButtonText: string | null;
  } | null;
  mainContent: {
    title: string;
    description: string;
    features: Array<{
      title: string;
      description: string;
      icon: "box" | "eye" | "settings" | "shield" | "star" | "tools" | null;
    }> | null;
  } | null;
  capabilities: {
    title: string;
    description: string;
    leftColumn: {
      title: string | null;
      content: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }> | null;
    } | null;
    rightColumn: {
      title: string | null;
      content: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }> | null;
    } | null;
  } | null;
  contactSection: {
    title: string;
    description: string;
    buttonText: string | null;
  } | null;
  recentProjects: {
    title: string;
    description: string | null;
    viewAllText: string | null;
  } | null;
} | null;
// Variable: getPageQuery
// Query: *[_type == 'page' && slug.current == $slug][0]{    _id,    _type,    name,    slug,    heading,    subheading,    "pageBuilder": pageBuilder[]{      ...,      _type == "callToAction" => {          link {      ...,        _type == "link" => {    "page": page->slug.current,    "post": post->slug.current  }      },      },      _type == "infoSection" => {        content[]{          ...,          markDefs[]{            ...,              _type == "link" => {    "page": page->slug.current,    "post": post->slug.current  }          }        }      },    },  }
export type GetPageQueryResult = {
  _id: string;
  _type: "page";
  name: string;
  slug: Slug;
  heading: string;
  subheading: string | null;
  pageBuilder: Array<{
    _key: string;
    _type: "callToAction";
    heading: string;
    text?: string;
    buttonText?: string;
    link: {
      _type: "link";
      linkType?: "href" | "page" | "post";
      href?: string;
      page: string | null;
      post: string | null;
      openInNewTab?: boolean;
    } | null;
  } | {
    _key: string;
    _type: "infoSection";
    heading?: string;
    subheading?: string;
    content: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs: Array<{
        linkType?: "href" | "page" | "post";
        href?: string;
        page: string | null;
        post: string | null;
        openInNewTab?: boolean;
        _type: "link";
        _key: string;
      }> | null;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
  }> | null;
} | null;
// Variable: sitemapData
// Query: *[_type == "page" || _type == "post" && defined(slug.current)] | order(_type asc) {    "slug": slug.current,    _type,    _updatedAt,  }
export type SitemapDataResult = Array<{
  slug: string;
  _type: "page";
  _updatedAt: string;
} | {
  slug: string;
  _type: "post";
  _updatedAt: string;
}>;
// Variable: allPostsQuery
// Query: *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  }
export type AllPostsQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string;
  slug: string;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date: string;
  author: {
    firstName: string;
    lastName: string;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
  } | null;
}>;
// Variable: morePostsQuery
// Query: *[_type == "post" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  }
export type MorePostsQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string;
  slug: string;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date: string;
  author: {
    firstName: string;
    lastName: string;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
  } | null;
}>;
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug] [0] {    content[]{    ...,    markDefs[]{      ...,        _type == "link" => {    "page": page->slug.current,    "post": post->slug.current  }    }  },      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  }
export type PostQueryResult = {
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      linkType?: "href" | "page" | "post";
      href?: string;
      page: string | null;
      post: string | null;
      openInNewTab?: boolean;
      _type: "link";
      _key: string;
    }> | null;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  _id: string;
  status: "draft" | "published";
  title: string;
  slug: string;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date: string;
  author: {
    firstName: string;
    lastName: string;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
  } | null;
} | null;
// Variable: postPagesSlugs
// Query: *[_type == "post" && defined(slug.current)]  {"slug": slug.current}
export type PostPagesSlugsResult = Array<{
  slug: string;
}>;
// Variable: pagesSlugs
// Query: *[_type == "page" && defined(slug.current)]  {"slug": slug.current}
export type PagesSlugsResult = Array<{
  slug: string;
}>;
// Variable: galleryPageQuery
// Query: *[_type == "galleryPage"][0]{  title,  description,  categories[]{    name,    slug  },  images[]{    image{      asset->{        _id,        url,        metadata{          dimensions,          blurhash,          lqip        }      },      alt    },    title,    description,    category,    alt,    featured  },  loadMoreText,  callToAction{    title,    description,    primaryButtonText,    secondaryButtonText,    phoneNumber  }}
export type GalleryPageQueryResult = {
  title: string;
  description: string;
  categories: Array<{
    name: string;
    slug: Slug;
  }> | null;
  images: Array<{
    image: {
      asset: {
        _id: string;
        url: string | null;
        metadata: {
          dimensions: SanityImageDimensions | null;
          blurhash: null;
          lqip: string | null;
        } | null;
      } | null;
      alt: null;
    };
    title: string;
    description: string;
    category: "alle" | "jordarbejde" | "maskiner" | "projekter" | "transport";
    alt: string;
    featured: boolean | null;
  }> | null;
  loadMoreText: string | null;
  callToAction: {
    title: string;
    description: string;
    primaryButtonText: string | null;
    secondaryButtonText: string | null;
    phoneNumber: string;
  } | null;
} | null;
// Variable: contactPageQuery
// Query: *[_type == "contactPage"][0]{  title,  description,  contactInfo{    phone,    phoneHours,    email,    emailResponse,    address,    emergencyPhone,    emergencyHours  },  serviceAreas{    title,    description,    areas[]  },  contactForm{    title,    serviceOptions[]{      label,      value    },    submitButtonText,    privacyNotice  }}
export type ContactPageQueryResult = {
  title: string;
  description: string;
  contactInfo: {
    phone: string;
    phoneHours: string | null;
    email: string;
    emailResponse: string | null;
    address: string;
    emergencyPhone: string;
    emergencyHours: string | null;
  } | null;
  serviceAreas: {
    title: string;
    description: string;
    areas: Array<string>;
  } | null;
  contactForm: {
    title: string;
    serviceOptions: Array<{
      label: string;
      value: string;
    }> | null;
    submitButtonText: string | null;
    privacyNotice: string | null;
  } | null;
} | null;
// Variable: servicesPageQuery
// Query: *[_type == "servicesPage"][0]{  title,  description,  services[]{    title,    description,    icon,    features[]  },  callToAction{    title,    description,    buttonText,    buttonLink  }}
export type ServicesPageQueryResult = {
  title: string;
  description: string;
  services: Array<{
    title: string;
    description: string;
    icon: "arrow" | "box" | "building" | "eye" | "flag" | "settings" | "shield" | "tools" | null;
    features: Array<string>;
  }>;
  callToAction: {
    title: string;
    description: string;
    buttonText: string | null;
    buttonLink: string;
  } | null;
} | null;
// Variable: aboutPageQuery
// Query: *[_type == "aboutPage"][0]{  title,  description,  companyDescription,  values[]{    title,    description,    icon  },  contactInfo{    phone,    email,    address  }}
export type AboutPageQueryResult = null;
// Variable: competenciesPageQuery
// Query: *[_type == "competenciesPage"][0]{  title,  description,  coreCompetencies{    sectionTitle,    competencies[]{      title,      description,      icon    }  },  technicalExpertise{    sectionTitle,    equipment{      title,      items[]    },    methods{      title,      items[]    }  },  experienceStats{    sectionTitle,    stats[]{      number,      title,      description    }  },  materialsSection{    sectionTitle,    materials{      title,      items[]    },    capacity{      title,      items[]    }  }}
export type CompetenciesPageQueryResult = null;
// Variable: footerQuery
// Query: *[_type == "footer"][0]{  title,  companySection{    title,    description  },  competenciesSection{    title,    competencies[]{      name    }  },  contactSection{    title,    phone,    email,    address  },  linksSection{    title,    links[]{      title,      url    }  },  copyright}
export type FooterQueryResult = null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"settings\"][0]{\n  title,\n  description,\n  ogImage\n}": SettingsQueryResult;
    "*[_type == \"homepage\"][0]{\n  hero{\n    title,\n    subtitle,\n    backgroundImage{\n      asset->{\n        _id,\n        url\n      },\n      alt\n    },\n    primaryButtonText,\n    secondaryButtonText\n  },\n  mainContent{\n    title,\n    description,\n    features[]{\n      title,\n      description,\n      icon\n    }\n  },\n  capabilities{\n    title,\n    description,\n    leftColumn{\n      title,\n      content\n    },\n    rightColumn{\n      title,\n      content\n    }\n  },\n  contactSection{\n    title,\n    description,\n    buttonText\n  },\n  recentProjects{\n    title,\n    description,\n    viewAllText\n  }\n}": HomepageQueryResult;
    "\n  *[_type == 'page' && slug.current == $slug][0]{\n    _id,\n    _type,\n    name,\n    slug,\n    heading,\n    subheading,\n    \"pageBuilder\": pageBuilder[]{\n      ...,\n      _type == \"callToAction\" => {\n        \n  link {\n      ...,\n      \n  _type == \"link\" => {\n    \"page\": page->slug.current,\n    \"post\": post->slug.current\n  }\n\n      }\n,\n      },\n      _type == \"infoSection\" => {\n        content[]{\n          ...,\n          markDefs[]{\n            ...,\n            \n  _type == \"link\" => {\n    \"page\": page->slug.current,\n    \"post\": post->slug.current\n  }\n\n          }\n        }\n      },\n    },\n  }\n": GetPageQueryResult;
    "\n  *[_type == \"page\" || _type == \"post\" && defined(slug.current)] | order(_type asc) {\n    \"slug\": slug.current,\n    _type,\n    _updatedAt,\n  }\n": SitemapDataResult;
    "\n  *[_type == \"post\" && defined(slug.current)] | order(date desc, _updatedAt desc) {\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{firstName, lastName, picture},\n\n  }\n": AllPostsQueryResult;
    "\n  *[_type == \"post\" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{firstName, lastName, picture},\n\n  }\n": MorePostsQueryResult;
    "\n  *[_type == \"post\" && slug.current == $slug] [0] {\n    content[]{\n    ...,\n    markDefs[]{\n      ...,\n      \n  _type == \"link\" => {\n    \"page\": page->slug.current,\n    \"post\": post->slug.current\n  }\n\n    }\n  },\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{firstName, lastName, picture},\n\n  }\n": PostQueryResult;
    "\n  *[_type == \"post\" && defined(slug.current)]\n  {\"slug\": slug.current}\n": PostPagesSlugsResult;
    "\n  *[_type == \"page\" && defined(slug.current)]\n  {\"slug\": slug.current}\n": PagesSlugsResult;
    "*[_type == \"galleryPage\"][0]{\n  title,\n  description,\n  categories[]{\n    name,\n    slug\n  },\n  images[]{\n    image{\n      asset->{\n        _id,\n        url,\n        metadata{\n          dimensions,\n          blurhash,\n          lqip\n        }\n      },\n      alt\n    },\n    title,\n    description,\n    category,\n    alt,\n    featured\n  },\n  loadMoreText,\n  callToAction{\n    title,\n    description,\n    primaryButtonText,\n    secondaryButtonText,\n    phoneNumber\n  }\n}": GalleryPageQueryResult;
    "*[_type == \"contactPage\"][0]{\n  title,\n  description,\n  contactInfo{\n    phone,\n    phoneHours,\n    email,\n    emailResponse,\n    address,\n    emergencyPhone,\n    emergencyHours\n  },\n  serviceAreas{\n    title,\n    description,\n    areas[]\n  },\n  contactForm{\n    title,\n    serviceOptions[]{\n      label,\n      value\n    },\n    submitButtonText,\n    privacyNotice\n  }\n}": ContactPageQueryResult;
    "*[_type == \"servicesPage\"][0]{\n  title,\n  description,\n  services[]{\n    title,\n    description,\n    icon,\n    features[]\n  },\n  callToAction{\n    title,\n    description,\n    buttonText,\n    buttonLink\n  }\n}": ServicesPageQueryResult;
    "*[_type == \"aboutPage\"][0]{\n  title,\n  description,\n  companyDescription,\n  values[]{\n    title,\n    description,\n    icon\n  },\n  contactInfo{\n    phone,\n    email,\n    address\n  }\n}": AboutPageQueryResult;
    "*[_type == \"competenciesPage\"][0]{\n  title,\n  description,\n  coreCompetencies{\n    sectionTitle,\n    competencies[]{\n      title,\n      description,\n      icon\n    }\n  },\n  technicalExpertise{\n    sectionTitle,\n    equipment{\n      title,\n      items[]\n    },\n    methods{\n      title,\n      items[]\n    }\n  },\n  experienceStats{\n    sectionTitle,\n    stats[]{\n      number,\n      title,\n      description\n    }\n  },\n  materialsSection{\n    sectionTitle,\n    materials{\n      title,\n      items[]\n    },\n    capacity{\n      title,\n      items[]\n    }\n  }\n}": CompetenciesPageQueryResult;
    "*[_type == \"footer\"][0]{\n  title,\n  companySection{\n    title,\n    description\n  },\n  competenciesSection{\n    title,\n    competencies[]{\n      name\n    }\n  },\n  contactSection{\n    title,\n    phone,\n    email,\n    address\n  },\n  linksSection{\n    title,\n    links[]{\n      title,\n      url\n    }\n  },\n  copyright\n}": FooterQueryResult;
  }
}
