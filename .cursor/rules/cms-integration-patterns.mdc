---
description: 
globs: 
alwaysApply: true
---
# CMS Integration and Data Fetching Patterns

## Data Fetching Architecture

### Safe Data Fetching Wrapper
Always use [frontend/sanity/lib/safeDataFetching.ts](mdc:frontend/sanity/lib/safeDataFetching.ts) for CMS data:
```typescript
const result = await fetchWithFallback(
  () => sanityFetch({ query: homepageQuery }),
  defaultHomepageData,
  'Homepage'
);
```

### Validation with Fallbacks
All CMS data must be validated using Zod schemas from [frontend/utils/contentValidation.ts](mdc:frontend/utils/contentValidation.ts):
```typescript
const validatedData = validateHomepage(rawData);
if (!validatedData) {
  // Falls back to default data automatically
  return defaultHomepageData;
}
```

## GROQ Query Patterns
Define queries in [frontend/sanity/lib/queries.ts](mdc:frontend/sanity/lib/queries.ts):

### Singleton Query Pattern
```typescript
export const homepageQuery = defineQuery(`*[_type == "homepage"][0]{
  // Select specific fields needed
  hero{ title, subtitle, backgroundImage },
  // ... other fields
}`);
```

### Document Collection Query
```typescript
export const allPostsQuery = defineQuery(`
  *[_type == "post" && defined(slug.current)] | order(date desc) {
    ${postFields}
  }
`);
```

### Reference Resolution
```typescript
const linkReference = /* groq */ `
  _type == "link" => {
    "page": page->slug.current,
    "post": post->slug.current
  }
`;
```

## Component Integration Pattern

### Server Component with CMS Data
```typescript
// Example: [frontend/app/page.tsx](mdc:frontend/app/page.tsx)
export default async function HomePage() {
  const data = await fetchWithFallback(
    () => sanityFetch({ query: homepageQuery }),
    defaultHomepageData,
    'Homepage'
  );

  return (
    <ErrorBoundary>
      <main>
        <HeroSection {...data.hero} />
        {/* other sections */}
      </main>
    </ErrorBoundary>
  );
}
```

### Error Boundary Usage
Wrap CMS-driven content with [frontend/app/components/ErrorBoundary.tsx](mdc:frontend/app/components/ErrorBoundary.tsx):
```typescript
<ErrorBoundary>
  <CMSContent data={data} />
</ErrorBoundary>
```

## Type Safety Rules
1. **Never use `any` types** - always define proper TypeScript interfaces
2. **Validate all CMS data** before using in components
3. **Provide fallback data** for all content types
4. **Use generated types** from `pnpm run typegen`

## Content Validation Patterns

### Zod Schema Definition
```typescript
// In [frontend/utils/contentValidation.ts](mdc:frontend/utils/contentValidation.ts)
export const heroSectionSchema = z.object({
  title: z.string().min(1, danishMessages.required).max(1000),
  subtitle: z.string().min(1, danishMessages.required).max(2000),
  backgroundImage: imageSchema,
});
```

### Validation Function
```typescript
export function validateHomepage(data: unknown): ValidatedHomepage | null {
  try {
    return homepageSchema.parse(data);
  } catch (error) {
    console.error('Homepage validation failed:', error);
    return null;
  }
}
```

## Image Handling
Use [frontend/sanity/lib/utils.ts](mdc:frontend/sanity/lib/utils.ts) for image URLs:
```typescript
const imageUrl = urlForImage(image)?.width(800).height(600).url();
```

## Link Resolution
Use the linkResolver for all link objects:
```typescript
const href = linkResolver(linkObject);
if (href) {
  // Render link
}
```

## Performance Considerations
- **Server Components**: Prefer server-side data fetching when possible
- **Caching**: Leverage Next.js caching for Sanity data
- **Image Optimization**: Always use Next.js Image component
- **Selective Queries**: Only fetch fields you actually need
