---
description: 
globs: 
alwaysApply: true
---
# Component and Code Conventions

## TypeScript & React Patterns

### Component Structure
Use functional components with TypeScript interfaces:
```typescript
// Example: [frontend/app/components/IconComponent.tsx](mdc:frontend/app/components/IconComponent.tsx)
import React from 'react';

export interface IconComponentProps {
  name: string;
  size?: number;
  className?: string;
}

export function IconComponent({ name, size = 24, className }: IconComponentProps) {
  return (
    <div className={className}>
      {/* Component content */}
    </div>
  );
}
```

### Component File Organization
- Use `function` keyword for components, not `const`
- Named exports over default exports for components
- Each component in its own file: `ComponentName.tsx`
- Place in [frontend/app/components/](mdc:frontend/app/components)

### Page Structure Template
```typescript
// Example: [frontend/app/galleri/page.tsx](mdc:frontend/app/galleri/page.tsx)
export default function GalleriPage() {
  return (
    <main>
      <h1>Page Title</h1>
      {/* Page content */}
    </main>
  );
}
```

## Error Handling Patterns

### Error Boundaries
Always wrap CMS content with [frontend/app/components/ErrorBoundary.tsx](mdc:frontend/app/components/ErrorBoundary.tsx):
```typescript
<ErrorBoundary>
  <CMSContent data={data} />
</ErrorBoundary>
```

### Early Returns for Error States
```typescript
export function Component({ data }: Props) {
  if (!data) {
    return <div>Indhold ikke tilg√¶ngeligt</div>;
  }
  
  if (data.error) {
    return <ErrorMessage />;
  }
  
  return <SuccessContent data={data} />;
}
```

## Styling Guidelines

### Tailwind CSS Usage
- Mobile-first responsive design
- Use utility classes over custom CSS
- Consistent spacing with Tailwind scale
- Use semantic color names when possible

### Component Styling Pattern
```typescript
export function Component({ className }: { className?: string }) {
  return (
    <div className={`base-styles ${className || ''}`}>
      {/* content */}
    </div>
  );
}
```

## Server vs Client Components

### Prefer Server Components
- Default to Server Components for better performance
- Use for data fetching and static content
- Minimize `'use client'` directives

### Client Components Only When Needed
- Interactive elements (onClick, onChange)
- Browser APIs (localStorage, window)
- State management (useState, useEffect)
- Third-party interactive libraries

## Image Handling

### Always Use Next.js Image Component
```typescript
import Image from 'next/image';

// Replace img tags with Image component
<Image
  src={imageUrl}
  alt={altText}
  width={800}
  height={600}
  className="..."
/>
```

### Image URL Generation
Use Sanity image URL builder from [frontend/sanity/lib/utils.ts](mdc:frontend/sanity/lib/utils.ts):
```typescript
const imageUrl = urlForImage(image)?.width(800).height(600).url();
```

## Type Safety Rules

### Interface Definitions
```typescript
export interface ComponentProps {
  title: string;
  description?: string;
  image?: {
    url: string;
    alt: string;
  };
  onClick?: () => void;
}
```

### Props Destructuring
```typescript
export function Component({ 
  title, 
  description, 
  image,
  onClick 
}: ComponentProps) {
  // Implementation
}
```

## State Management

### Minimize useState Usage
- Prefer Server Components for data
- Use React Server Components for CMS data
- Local state only for UI interactions

### Form Handling
```typescript
'use client';

export function ContactForm() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    message: ''
  });
  
  // Handle form submission
}
```

## Performance Best Practices

### Component Optimization
- Use React.memo() for expensive re-renders
- Implement proper key props for lists
- Avoid inline object/function creation in render

### Bundle Size Management
- Import only needed utilities
- Use dynamic imports for heavy components
- Leverage Next.js automatic code splitting

## File Naming Conventions
- Components: `PascalCase.tsx`
- Pages: `page.tsx` (App Router)
- Utilities: `camelCase.ts`
- Types: `types.ts` or inline interfaces
- Constants: `UPPER_SNAKE_CASE`

## Import Organization
```typescript
// 1. React and Next.js imports
import React from 'react';
import Image from 'next/image';

// 2. Third-party libraries
import { z } from 'zod';

// 3. Internal utilities and types
import { urlForImage } from '@/sanity/lib/utils';
import type { ComponentProps } from './types';

// 4. Relative imports
import './Component.module.css';
```
