---
description: 
globs: 
alwaysApply: true
---
# Development Workflow and Troubleshooting

## Development Setup Commands

### Starting Development Servers
```bash
# Start both frontend and studio
pnpm dev

# Start individual services
pnpm --filter frontend dev  # Frontend only (port 3000)
pnpm --filter studio dev    # Studio only (port 3333)
```

### Type Generation Workflow
```bash
# After any schema changes
pnpm run typegen

# From frontend directory
cd frontend && pnpm run typegen
```

## Schema Validation Workflow

### Before Making Schema Changes
1. **Backup current schema**: `npx sanity schema extract --path=backup.json`
2. **Test in development**: Make changes in dev environment first
3. **Validate schema**: `npx sanity schema validate`
4. **Regenerate types**: `pnpm run typegen`
5. **Test frontend**: Ensure no TypeScript errors

### After Schema Changes
1. **Restart studio**: Kill and restart Sanity Studio
2. **Clear browser cache**: Hard refresh Studio (Cmd+Shift+R)
3. **Verify in Studio**: Check that new fields appear correctly
4. **Test data flow**: Create test content and verify in frontend

## Troubleshooting Common Issues

### Schema Errors
```bash
# Validate schema for detailed error messages
npx sanity schema validate

# Check for unknown type references
grep -r "type.*:" studio/src/schemaTypes/
```

### Type Generation Issues
```bash
# Clear generated types and regenerate
rm frontend/sanity.types.ts
pnpm run typegen
```

### Studio Port Conflicts
```bash
# Kill processes on studio port
pkill -f "sanity dev"
lsof -ti:3333 | xargs kill -9
```

### Frontend Build Issues
```bash
# Check for linting errors
pnpm lint --max-warnings 0

# Build test
pnpm build

# TypeScript check
npx tsc --noEmit
```

## Content Validation Debugging

### Validation Error Debugging
Check browser console for validation failures:
```typescript
// In [frontend/utils/contentValidation.ts](mdc:frontend/utils/contentValidation.ts)
console.error('Validation failed:', error.issues);
```

### CMS Data Debugging
```typescript
// Add to data fetching functions
console.log('Raw CMS data:', rawData);
console.log('Validated data:', validatedData);
```

## Performance Monitoring

### Build Analysis
```bash
# Analyze bundle size
pnpm build
npx @next/bundle-analyzer

# Check for performance issues
pnpm lint
```

### CMS Query Optimization
- Use Sanity Vision to test GROQ queries
- Select only necessary fields
- Monitor query performance in browser Network tab

## Deployment Checklist

### Pre-deployment Validation
1. **Schema validation**: `npx sanity schema validate`
2. **Type generation**: `pnpm run typegen`
3. **Linting**: `pnpm lint --max-warnings 0`
4. **Build test**: `pnpm build`
5. **Content validation**: Test with real CMS data

### Environment Variables
Ensure these are set in production:
- `NEXT_PUBLIC_SANITY_PROJECT_ID`
- `NEXT_PUBLIC_SANITY_DATASET`
- `SANITY_API_READ_TOKEN`

### Sanity Studio Deployment
```bash
# Deploy studio to Sanity hosting
npx sanity deploy

# Or build for custom hosting
npx sanity build
```

## Error Recovery Patterns

### Schema Recovery
If schema breaks production:
1. Revert to last working schema
2. Deploy schema fix
3. Restart all services
4. Clear CDN cache if applicable

### Content Recovery
- Use Sanity's built-in version history
- Document content backup procedures
- Test content migrations in staging

## Testing Workflow

### Manual Testing Checklist
- [ ] All pages load without errors
- [ ] CMS content displays correctly
- [ ] Images load and display properly
- [ ] Links resolve correctly
- [ ] Danish text displays properly
- [ ] Mobile responsiveness works
- [ ] Error boundaries function

### Automated Checks
```bash
# Run all checks
pnpm lint && pnpm build && pnpm run typegen
```

## Code Quality Maintenance

### Regular Maintenance Tasks
- Update dependencies monthly
- Review and clean unused imports
- Optimize bundle size
- Update Sanity schema documentation
- Review error logs

### Git Workflow
- Always test schema changes locally first
- Include type generation in commits
- Document breaking changes
- Use descriptive commit messages for CMS changes

## Debugging Tools

### Sanity Studio
- Use Vision tab for GROQ query testing
- Check document inspector for data structure
- Monitor network requests in browser dev tools

### Next.js Frontend
- Use React Developer Tools
- Monitor console for validation errors
- Check Network tab for failed API calls
- Use Next.js built-in debugging
