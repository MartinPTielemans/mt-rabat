---
description: 
globs: 
alwaysApply: true
---
# Mt Rabat - Next.js Project Guide

## Project Overview
This is a Next.js 14+ project with TypeScript, Tailwind CSS, and Sanity CMS for a Danish company. The project uses the App Router and follows functional programming principles.

## Project Structure

### Frontend Architecture
- **Entry Point**: [frontend/app/layout.tsx](mdc:frontend/app/layout.tsx) - Root layout
- **Homepage**: [frontend/app/page.tsx](mdc:frontend/app/page.tsx) - Main landing page
- **Components**: [frontend/app/components/](mdc:frontend/app/components) - Reusable UI components
- **API Routes**: [frontend/app/api/](mdc:frontend/app/api) - Next.js API endpoints
- **Global Styles**: [frontend/app/globals.css](mdc:frontend/app/globals.css) - Tailwind and global CSS

### Sanity CMS Integration
- **Client Config**: [frontend/sanity/lib/client.ts](mdc:frontend/sanity/lib/client.ts) - Sanity client setup
- **API Helpers**: [frontend/sanity/lib/api.ts](mdc:frontend/sanity/lib/api.ts) - Data fetching functions
- **Studio**: [studio/](mdc:studio) - Sanity Studio configuration
- **Schema**: [studio/src/schemaTypes/](mdc:studio/src/schemaTypes) - Content models

## Danish Route Structure
The site uses Danish URLs:
- `/galleri` - Gallery page
- `/kompetencer` - Competencies/Skills page  
- `/kontakt` - Contact page
- `/om-os` - About Us page
- `/ydelser` - Services page

## Code Conventions

### TypeScript & React
- Use functional components with TypeScript interfaces
- Prefer named exports over default exports for components
- Use the `function` keyword for components, not `const`
- Implement proper error handling with early returns
- Minimize `use client` directives - prefer Server Components

### Component Structure
```typescript
// Component template in src/components/{name}/{name}.tsx
import React from 'react';

export interface {Name}Props {
  // Add component props here
}

export function {Name}({ ...props }: {Name}Props) {
  return (
    <div>
      {/* Component content */}
    </div>
  );
}
```

### Page Structure
```typescript
// Page template in src/app/{path}/page.tsx
export default function {Name}Page() {
  return (
    <main>
      <h1>{Name}</h1>
      {/* Page content */}
    </main>
  );
}
```

### Styling Guidelines
- Use Tailwind CSS for styling
- Mobile-first responsive design
- Use Shadcn UI components when available
- Prefer utility classes over custom CSS

### File Organization
- Components in `frontend/app/components/`
- Pages use App Router structure in `frontend/app/`
- Sanity-related code in `frontend/sanity/`
- Static assets in `frontend/public/`

## Key Dependencies & Tools
- **Framework**: Next.js 14+ with App Router
- **Styling**: Tailwind CSS
- **CMS**: Sanity
- **Language**: TypeScript
- **Package Manager**: pnpm
- **Deployment**: Vercel (based on [vercel.json](mdc:frontend/vercel.json))

## Development Patterns

### Data Fetching
- Use Server Components for data fetching when possible
- Sanity queries are defined in [frontend/sanity/lib/queries.ts](mdc:frontend/sanity/lib/queries.ts)
- API functions are in [frontend/sanity/lib/api.ts](mdc:frontend/sanity/lib/api.ts)

### Error Handling
- Implement error boundaries using `error.tsx` files
- Handle errors early in functions with guard clauses
- Use proper TypeScript typing for error states

### Component Patterns
- Keep components small and focused
- Use composition over inheritance
- Implement proper prop interfaces
- Follow the RORO pattern (Receive Object, Return Object)

## Danish Language Support
The project supports Danish content and routing. Refer to translations in the workspace rules for common Danish terms used throughout the application.

## Commands & Scripts
- `pnpm dev` - Start development server
- `pnpm build` - Build for production
- `pnpm studio` - Start Sanity Studio (from studio directory)

## Important Files to Reference
- [frontend/package.json](mdc:frontend/package.json) - Frontend dependencies
- [studio/package.json](mdc:studio/package.json) - Studio dependencies  
- [frontend/next.config.ts](mdc:frontend/next.config.ts) - Next.js configuration
- [frontend/tailwind.config.ts](mdc:frontend/tailwind.config.ts) - Tailwind configuration
- [frontend/tsconfig.json](mdc:frontend/tsconfig.json) - TypeScript configuration
